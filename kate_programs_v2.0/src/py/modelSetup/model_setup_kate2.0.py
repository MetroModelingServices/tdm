#	model_setup_kate2.0.py
#	edited by PGB: 8/2017
#
#	Creates k.model_setup.R for Kate v1.0 model run
#	Creates run_all_skims.mac and run_all_assign.mac macros and places
#	these files in the ./skims/inputs directory.
#
#	USE:
#		> python model_setup_kate2.0.py <inputs_spreadsheet_name>:OPTIONAL <seed/noseed>:OPTIONAL
#
#		If <inputs_spreadsheet_name> is entered, program will check if the spreadsheet exists.
#		If spreadsheet exists, then it will proceed with the spreadsheet without prompting user.
#		Otherwise, program will prompt user with a dialog to select an inputs spreadsheet.
#		Spreadsheet name must end with *.xlsx extension.
#
#		If 'seed' is entered, program will build a newbank macro using the SEED information from the
#		inputs spreadsheet. The result is a new skims bank populated with SEED networks and matrices.
#
#		If 'noseed' is entered, program will not build a newbank macro for creating a new skims bank.
#		Use this option if you already have a skims bank in place.
# 
#		If neither 'seed' or 'noseed' is entered, program will prompt user as to whether or not to use
#		a seed bank.
#
#	EXAMPLES:
#		> python model_setup_kate2.0.py Inputs_Spreadsheet.xlsx
#				Will use Inputs_Spreadsheet.xlsx, and will prompt user whether or not to use a SEED bank
#
#		> python model_setup_kate2.0.py seed
#				Will use a SEED bank, and will prompt user to select an inputs spreadsheet.
#
#		> python model_setup_kate2.0.py noseed
#				Will NOT use a SEED bank, and will prompt user to select an inputs spreadsheet.
#
#		> python model_setup_kate2.0.py Inputs_Spreadsheet.xlsx seed
#				Will use Inputs_Spreadsheet.xlsx, and will use a SEED bank. No user prompts.
#
#		> python model_setup_kate2.0.py Inputs_Spreadsheet.xlsx noseed
#				Will use Inputs_Spreadsheet.xlsx, and will NOT use a SEED bank. No user prompts.
#

from sys import platform as _platform
import os, subprocess, sys
import xlrd
import csv
import Tkinter, tkFileDialog, tkMessageBox
import string

os.chdir(os.path.dirname(os.path.realpath(__file__)))

if _platform == "cygwin":
	environment_replace = "\r\n"
else:
	environment_replace = "\n"

model_path = os.getcwd()
model_path = model_path.replace('\\', '/')

# Check for inputs spreadsheet as part of call to python program
# If it exists, verify that it is a valid name
# If all checks out, then skip Input Spreadsheet Dialog
if len(sys.argv) > 1 and os.path.isfile(sys.argv[1]):
		file_name = sys.argv[1]
		file_name = model_path + "/" + file_name
elif len(sys.argv) > 2 and os.path.isfile(sys.argv[2]):
		file_name = sys.argv[2]
		file_name = model_path + "/" + file_name
else:
	# Open Tkinter dialog so user can select input spreadsheet
	root = Tkinter.Tk()
	root.withdraw()
	file_name = tkFileDialog.askopenfilename(title = "Select Kate Model Input Spreadsheet", filetypes = [('.xlsx file','*.xlsx')])

file_name = file_name.replace('./', '')

# Check for seed variable as part of call to python program
# If it exists, then skip Seed Bank Dialog
if len(sys.argv) > 1 and sys.argv[1] == 'seed':
	seed = True
elif len(sys.argv) > 2 and sys.argv[2] == 'seed':
	seed = True
elif len(sys.argv) > 1 and sys.argv[1] == 'noseed':
	seed = False
elif len(sys.argv) > 2 and sys.argv[2] == 'noseed':
	seed = False
else:
	# Open Tkinter Yes/No dialog to use Seed Bank
	root = Tkinter.Tk()
	root.withdraw()
	seed = tkMessageBox.askyesno("Seed bank", "Use seed bank from inputs spreadsheet? If yes, make sure that no SKIMS directory currently exists.")

# Open xlsx inputs file, convert variable_list to csv, then use csv to complete rest of program
# Should be rewritten at some point to simplify this process (use pandas?)
wb = xlrd.open_workbook(file_name)
sh = wb.sheet_by_name('variable_list')

temp_csv = open('./temp_variable.csv', 'wb')
wr = csv.writer(temp_csv, quoting=csv.QUOTE_NONE)
for rownum in xrange(sh.nrows):
	wr.writerow(sh.row_values(rownum,start_colx=0,end_colx=1) + sh.row_values(rownum,start_colx=2,end_colx=3))
temp_csv.close()

# Call sed command to eliminate trailing .0 from integer values
cmd = "sed -i 's/\.0//g' temp_variable.csv"
os.system(cmd)

d={}
f=open("./temp_variable.csv","r")
for line in f.readlines():
	d[line.replace(environment_replace,"").split(",")[0]] = line.replace(environment_replace,"").split(",")[1]
f.close()

# Call sed command to delete ./temp_variable.csv file
cmd = "rm ./temp_variable.csv"
os.system(cmd)

o=open("k.model_setup.R","w")
o.write("#-----------------------------------------------------------------------------------------------------\n")
o.write("# Model setup for KATE model - programmed to run on Windows using Emme skims\n")
o.write("# Automatically generated by write_model_setup.py\n")
o.write("#-----------------------------------------------------------------------------------------------------\n")
o.write("\n")
o.write("suppressWarnings(library(mrio))\n")
o.write("suppressWarnings(library(omxr))\n")
o.write("\n")
o.write("#-----------------------------------------------------------------------------------------------------\n")
o.write("# Project variables\n")
o.write("#-----------------------------------------------------------------------------------------------------\n")
o.write("\n")
o.write("project           <- '" + d["PROJECT"] + "'\n")
o.write("alternative       <- '" + d["ALTERNATIVE"] + "'\n")
o.write("year              <- " + d["YEAR"] + "\n")
o.write("initials          <- '" + d["INITIALS"] + "'\n")
o.write("\n")
o.write("#-----------------------------------------------------------------------------------------------------\n")
o.write("# Programs and directories\n")
o.write("# R.path is automatically set by forecast_kate.sh. Be sure that forecast_kate.sh contains correct path\n")
o.write("#-----------------------------------------------------------------------------------------------------\n")
o.write("\n")
o.write("project.dir       <- '" + model_path + "'\n")
o.write("proj.inputs       <- '" + file_name + "'\n")
o.write("\n")
o.write("R.path            <- 'SET BY forecast_kate.sh'\n")
o.write("source(paste(R.path, 'metro_R_functions.R', sep='/'))\n")
o.write("\n")
o.write("#-----------------------------------------------------------------------------------------------------\n")
o.write("# Standard banks used by the demand model and peaking programs\n")
o.write("#-----------------------------------------------------------------------------------------------------\n")
o.write("\n")
o.write("bank              <- paste(project.dir, 'skims/emmebank', sep='/')\n")
o.write("assignbank        <- paste(project.dir, 'model/peak/assign/emmebank', sep='/')\n")
o.write("misc_dir          <- 'V:/misc/'\n")
o.write("transit_fares     <- '" + d["TRANSIT_FARE_TABLE"] + "'\n")
o.write("transit_fares_li  <- '" + d["TRANSIT_FARE_TABLE_LOW_INCOME"] + "'\n")
o.write("truckbank         <- '" + d["TRUCKBANK_PATH"] + "/emmebank'\n")
o.write("airport_dir       <- '" + d["AIRPORT_DIR"] + "'\n")
o.write("bike_dir          <- '" + d["BIKE_DIR"] + "'\n")
o.write("\n")
o.write("#-----------------------------------------------------------------------------------------------------\n")
o.write("# Tolling control: TRUE = run model assuming tolling\n")
o.write("#-----------------------------------------------------------------------------------------------------\n")
o.write("\n")
if int(d["TOLL"]) == 0:
	o.write("toll              <- FALSE\n")
else:
	o.write("toll              <- TRUE\n")
o.write("\n")
o.write("#-----------------------------------------------------------------------------------------------------\n")
o.write("# Automated peak spreading control: FALSE by default, TRUE to activate\n")
o.write("#-----------------------------------------------------------------------------------------------------\n")
o.write("\n")
o.write("peakSpread        <- FALSE\n")
o.write("\n")
o.write("#-----------------------------------------------------------------------------------------------------\n")
o.write("# Market segmentation: FALSE by default, TRUE if saving mode by auto ownership (cval = 0, 1, 23) and\n")
o.write("# income classification (l, m, h)\n")
o.write("# Automatically set by forecast.sh\n")
o.write("#-----------------------------------------------------------------------------------------------------\n")
o.write("\n")
o.write("mce....           <- FALSE\n")
o.write("\n")
o.write("#-----------------------------------------------------------------------------------------------------\n")
o.write("# MetroScope control: TRUE = produce outputs for MetroScope tandem runs\n")
o.write("#-----------------------------------------------------------------------------------------------------\n")
o.write("\n")
o.write("metroscope        <- FALSE\n")
o.write("\n")
o.write("#-----------------------------------------------------------------------------------------------------\n")
o.write("# Park & Ride lot choice model settings\n")
o.write("#-----------------------------------------------------------------------------------------------------\n")
o.write("\n")
o.write("doShadowPricing          <- " + d["SHADOW_PRICING"] + "\n")
o.write("warmStartShadowPricing   <- " + d["WARM_START_SP"] + "\n")
o.write("maxSPIter                <- " + d["MAX_ITER_SP"] + "\n")
o.write("input_lottaz_filename    <- paste(project.dir, 'model/lottaz_in.csv', sep='/')\n")
o.write("input_lottazinf_filename <- paste(project.dir, 'model/lottazinf_in.csv', sep='/')\n")
o.write("lotChoiceTraceOD         <- c(" + d["TRACE_ORIG"] + "," + d["TRACE_DEST"] + ")\n")
o.write("selectLotZone            <- " + d["TRACE_LOT"] + "\n")
o.write("loglotChoiceFileName     <- paste(project.dir, 'logs/lotChoiceTrace.log', sep='/')\n")
o.write("\n")
o.write("#-----------------------------------------------------------------------------------------------------\n")
o.write("# Bike modeling tools settings\n")
o.write("#-----------------------------------------------------------------------------------------------------\n")
o.write("\n")
o.write("bike_dir_ref             <- NA\n")
o.write("prohib_worse_bike_util   <- FALSE\n")
o.write("\n")
o.write("#-----------------------------------------------------------------------------------------------------\n")
o.write("# Miscellaneous settings\n")
o.write("#-----------------------------------------------------------------------------------------------------\n")
o.write("\n")
o.write("numzones          <- " + d["NUMZONES"] + "\n")
o.write("pdxtaz            <- " + d["PDXTAZ"] + "\n")
o.write("\n")
o.write("#-----------------------------------------------------------------------------------------------------\n")
o.write("# Final cleanup : If TRUE (default), will delete all extraneous files from model_* directories after\n")
o.write("# mode choice programs. FALSE will save all files\n")
o.write("#-----------------------------------------------------------------------------------------------------\n")
o.write("\n")
o.write("finalCleanup      <- TRUE\n")
o.write("\n")
o.close()

if seed==True:
	if not os.path.exists('skims'):
		os.makedirs('skims')
		os.makedirs('skims/macros')
		os.makedirs('skims/inputs')
	cmd = "cp -r " + d["SEEDBANK_PATH"] + "/inputs ./skims/"
	os.system(cmd)
	o=open("skims/macros/newbank.mac","w")
	o.write("10       / Number of Network Scenarios\n")
	o.write("2200     / Number of zones or centroids\n")
	o.write("20000    / Number of nodes incl. centroids\n")
	o.write("50000    / Number of directional links\n")
	o.write("100000   / Number of turn table entries \n")
	o.write("999      / Number of transit vehicle types\n")
	o.write("5000     / Number of transit lines or routes\n")
	o.write("100000   / Number of transit line segments\n")
	o.write("500      / Number of matrices mf, mo, md, ms\n")
	o.write("99       / Number of functions per fct-class\n")
	o.write("2000     / Number of operators per fct-class\n")
	o.write("5000     / Log book size in words\n")
	o.write("50000    / Entries / demarcation set\n")
	o.write("2500000  / Size of extra attribute table in words\n")
	o.write("y        / Node labels required?\n")
	o.write("y        / User data items on transit segments required?\n")
	o.write("y        / Include work files to save class specific auto volumes?\n")
	o.write(d["PROJECT"] + " " + d["YEAR"] + " " + d["ALTERNATIVE"] + "\n")
	o.write("y        / Is Estimated size of bank OK?\n")
	o.write("2        / Type of Terminal (2 - Emtool)\n")
	o.write("1        / Type of Printer\n")
	o.write("1        / Type of plotfile (1=GPL/GPR plotfile (color))\n")
	o.write(d["INITIALS"] + "\n")
	o.write("1        / temp scenario to be created (this will be deleted)\n")
	o.write("temp\n")
	o.write("1.23\n")
	o.write("3\n")
	o.write("mi\n")
	o.write("7\n")
	o.write("6\n")
	o.write("8\n")
	o.write("0\n")
	o.write("q\n")
	o.write("1.22\n")
	o.write("6\n")
	o.write("n\n")
	o.write("n\n")
	o.write("y\n")
	o.write("y\n")
	o.write("q\n")
	o.write("~<import_scenario " + d["SEEDBANK_PATH"] + "/emmebank " + d["SEED_SCENARIO_NUMBER"] + " " + d["PM2_SKIMS_SCENARIO_NUMBER"] + " " + d["PROJECT"] + " " + d["YEAR"] + " " + d["ALTERNATIVE"] + " PM2\n")
	o.write("~<scendel 1\n")
	o.write("~<zone\n")
	o.write("~<scencopy " + d["PM2_SKIMS_SCENARIO_NUMBER"] + " " + d["MD1_SKIMS_SCENARIO_NUMBER"] + " " + d["PROJECT"] + " " + d["YEAR"] + " " + d["ALTERNATIVE"] + " MD1\n")
	o.write("~<matimport " + d["SEEDBANK_PATH"] + "/emmebank mointrznl mo69\n")
	o.write("~<matimport " + d["SEEDBANK_PATH"] + "/emmebank mfpm2sov mf40 pm2sov xyz PM2 SOV seed trip table - " + d["YEAR"] + "\n")
	o.write("~<matimport " + d["SEEDBANK_PATH"] + "/emmebank mfpm2hov mf41 pm2hov xyz PM2 HOV seed trip table - " + d["YEAR"] + "\n")
	o.write("~<matimport " + d["SEEDBANK_PATH"] + "/emmebank mfmd1sov mf42 md1sov xyz MD1 SOV seed trip table - " + d["YEAR"] + "\n")
	o.write("~<matimport " + d["SEEDBANK_PATH"] + "/emmebank mfmd1hov mf43 md1hov xyz MD1 HOV seed trip table - " + d["YEAR"] + "\n")
	o.write("~<matimport " + d["TRUCKBANK_PATH"] + "/emmebank mfpm2Hpe mf44 pm2Hpe xyz PM2 Heavy Truck PCEs - " + d["YEAR"] + "\n")
	o.write("~<matimport " + d["TRUCKBANK_PATH"] + "/emmebank mfpm2Mpe mf45 pm2Mpe xyz PM2 Medium Truck PCEs - " + d["YEAR"] + "\n")
	o.write("~<matimport " + d["TRUCKBANK_PATH"] + "/emmebank mfmd1Hpe mf46 md1Hpe xyz MD1 Heavy Truck PCEs - " + d["YEAR"] + "\n")
	o.write("~<matimport " + d["TRUCKBANK_PATH"] + "/emmebank mfmd1Mpe mf47 md1Mpe xyz MD1 Medium Truck PCEs - " + d["YEAR"] + "\n")
	o.write("~<import_ensembles v:/misc/d301.kateEnsembles\n")
	o.write("q\n")
	o.close()

	# Run newbank macro to create new skims bank
	os.chdir("./skims")
	cmd = "Emme -ng newbank -m ./macros/newbank.mac"
	os.system(cmd)
	os.system("rm *.in")
	os.chdir("../")


# Copy transit lines from directory if they exist
cmd1 = d["TRANSIT_FILE_PATH"] + "/" + d["PEAK_TRANSIT_LINE_FILE_NAME"]
cmd2 = d["TRANSIT_FILE_PATH"] + "/" + d["OFF_PEAK_TRANSIT_LINE_FILE_NAME"]
if os.path.isfile(cmd1):
	cmd = "cp " + d["TRANSIT_FILE_PATH"] + "/" + d["PEAK_TRANSIT_LINE_FILE_NAME"] + " ./skims/inputs/."
	os.system(cmd)
else: 
	print(d["TRANSIT_FILE_PATH"] + "/" + d["PEAK_TRANSIT_LINE_FILE_NAME"] + " does not exist.")
	print("Could not copy file. Please check ./skims/inputs directory to ensure that proper transit file is in place.")
if os.path.isfile(cmd2):
	cmd = "cp " + d["TRANSIT_FILE_PATH"] + "/" + d["OFF_PEAK_TRANSIT_LINE_FILE_NAME"] + " ./skims/inputs/."
	os.system(cmd)
else: 
	print(d["TRANSIT_FILE_PATH"] + "/" + d["OFF_PEAK_TRANSIT_LINE_FILE_NAME"] + " does not exist.")
	print("Could not copy file. Please check ./skims/inputs directory to ensure that proper transit file is in place.")


# Determine root directory structure for creating trip table adjust program
dir_root = '../'
dir_list = [os.path.join(dir_root,o) for o in os.listdir(dir_root) if os.path.isdir(os.path.join(dir_root,o))]
dir_list = [word.replace('../', '') for word in dir_list]

# Sort the various iterations of the model run in the root directory using a Natural Sort method
import re

def atoi(text):
    return int(text) if text.isdigit() else text

def natural_keys(text):
    '''
    alist.sort(key=natural_keys) sorts in human order
    http://nedbatchelder.com/blog/200712/human_sorting.html
    (See Toothy's implementation in the comments)
    '''
    return [ atoi(c) for c in re.split('(\d+)', text) ]

dir_list.sort(key=natural_keys)

current_dir = os.path.basename(os.path.normpath(model_path))
previous_dir = 'NA'

for i in range(len(dir_list)):
	if dir_list[i] == current_dir and i > 0:
		previous_dir = dir_list[i-1]

# Write run_all_skims macro
o=open("skims/macros/run_all_skims.mac","w")
if previous_dir != 'NA':
	o.write("~<trip_table_avg " + previous_dir + " " + current_dir + "\n")
if int(d["TOLL"]) == 1:
	o.write("~<run_auto_skims_toll " + d["PM2_SKIMS_SCENARIO_NUMBER"] + " " + d["MD1_SKIMS_SCENARIO_NUMBER"] + " 12\n")
	o.write("~<skimck_auto_toll\n")
else:	
	o.write("~<run_auto_skims_notoll " + d["PM2_SKIMS_SCENARIO_NUMBER"] + " " + d["MD1_SKIMS_SCENARIO_NUMBER"] + " 12\n")
	o.write("~<skimck_auto\n")
o.write("~<batchinlines " + d["PM2_SKIMS_SCENARIO_NUMBER"] + " " + d["PEAK_TRANSIT_LINE_FILE_NAME"] + " " + d["MD1_SKIMS_SCENARIO_NUMBER"] + " " + d["OFF_PEAK_TRANSIT_LINE_FILE_NAME"] + "\n")
o.write("~<kate_transit_netprep " + d["PM2_SKIMS_SCENARIO_NUMBER"] + " " + d["MD1_SKIMS_SCENARIO_NUMBER"] + "\n")
o.write("~<run_tr_skims " + d["PM2_SKIMS_SCENARIO_NUMBER"] + " " + d["MD1_SKIMS_SCENARIO_NUMBER"] + "\n")
o.write("~<distance_ASN " + d["PM2_SKIMS_SCENARIO_NUMBER"] + "\n")
o.write("~<distance_walk_ASN " + d["PM2_SKIMS_SCENARIO_NUMBER"] + "\n")
o.write("~<skimck\n")
o.write("q\n")
o.close()

# Write run_all_assign macro <writes to skims/macros directory b/c this directory is eventually copied to assign directory
o=open("skims/macros/run_all_assign.mac","w")
o.write("~# Default setting skips PM2 auto assignment (assumes already run for tt histogram)" + "\n")
o.write("~#  to run PM2 auto assignment, change 3rd argument to run_assign_final macro from 0 to 1" + "\n")
if int(d["TOLL"]) == 1:
	o.write("~<run_assign_final_toll " + d["PM2_SKIMS_SCENARIO_NUMBER"] + " " + d["MD1_SKIMS_SCENARIO_NUMBER"] + " 0" + "\n")
else:
	o.write("~<run_assign_final_notoll " + d["PM2_SKIMS_SCENARIO_NUMBER"] + " " + d["MD1_SKIMS_SCENARIO_NUMBER"] + " 0" + "\n")
o.write("~<batchinlines " + d["PM2_SKIMS_SCENARIO_NUMBER"] + " " + d["PEAK_TRANSIT_LINE_FILE_NAME"] + " " + d["MD1_SKIMS_SCENARIO_NUMBER"] + " " + d["OFF_PEAK_TRANSIT_LINE_FILE_NAME"] + "\n")
o.write("~<kate_transit_netprep " + d["PM2_SKIMS_SCENARIO_NUMBER"] + " " + d["MD1_SKIMS_SCENARIO_NUMBER"] + "\n")
o.write("~<tr_assign_pkop pk " + d["PM2_SKIMS_SCENARIO_NUMBER"] + "\n")
o.write("~<tr_assign_pkop op " + d["MD1_SKIMS_SCENARIO_NUMBER"] + "\n")
o.write("~<tr_skims_assign_matrices_ACTUAL " + d["PM2_SKIMS_SCENARIO_NUMBER"] + " " + d["MD1_SKIMS_SCENARIO_NUMBER"] + "\n")
o.write("~<tr_skims_assign_process" + "\n")
o.write("~<621_summary " + d["PM2_SKIMS_SCENARIO_NUMBER"] + " " + d["MD1_SKIMS_SCENARIO_NUMBER"] + "\n")
o.write("q")
o.write("\n")
o.close()
